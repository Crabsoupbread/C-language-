#define _CRT_SECURE_NO_WARNINGS 1

#include<stdio.h>

//冒泡排序的意思是，相邻两个元素作比较，按从小到大的顺序排列。
//如：10 9 8 7......下一步：9 10 8 7......再下一步：9 8 10 7......这被称为一趟冒泡排序
//冒泡排序需要进行多趟，直到排序完成为止。
void sort(int a[], int n)//数组本质是指针，所以也可以写成 sort(int* a,int n)
{
	//确定冒泡排序的趟数。
	int i = 0;
	int j = 0;
	for (i = 0; i < n-1; i++)//10个元素排序最多需要9趟。
	{
		int q = 1;//假设本趟冒泡排序是一个有序数列（这样就能更快的处理如：9 1 2 3 4 5...的少量冒泡排序的情况）
		//每一趟冒泡排序的内容
		for (j = 0; j < n-1-i; j++)//每一趟完成后下一趟需要的次数减少一次
		{
			if (a[j] > a[j + 1])//进行重新排序
			{
				int tmp = a[j];
				a[j] = a[j + 1];
				a[j + 1] = tmp;
				q = 0;//本趟冒泡排序不是有序数列
			}
		}
		if (q == 1)//这就表明不需要再重排序，跳过排序
		{
			break;//跳出最外层for循环，使得这一自定义函数结束。
		}
	}
}
//int q=1; q=0;和if判断的作用是，添加一个判断的条件，加快代码的运行速度。

int main()
{
	int arr[] = { 10,9,8,7,6,5,4,3,2,1 };
	int m = 0;
	//对arr[]进行冒泡排序，使其变为升序。
	int sz = sizeof(arr) / sizeof(arr[0]);//获取数组中元素个数（此步骤不能写入自定义函数内，因为数组传参本质传递首元素地址，所以导致错误）
	printf("数组元素个数为：%d\n", sz);
	sort(arr,sz);
	for (m = 0; m < sz; m++)//遍历打印数组所有元素
	{
		printf("%d ", arr[m]);
	}
	
	return 0;
}
