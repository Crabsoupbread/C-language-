#define _CRT_SECURE_NO_WARNINGS 1

#include<stdio.h>//写一个递归函数用于处理斐波那契数列。（后一项等于前两项和。如112358....）

int Fib(int m)
{
	if (m <= 2)
		return 1;
	else
		return Fib(m - 1) + Fib(m - 2);
}
//采用这一代码块处理时有个问题，就是它每次都要返回两个值，如果n的值太大，则这一代码处理时间过长甚至导致卡死。（n=50或者更高时就会很危险）
//这就是算法不优化的表现，原因是进行了大量的重复运算。如何使得算法更加优化？

int Fib2(int k)
{
	int a = 1;
	int b = 1;
	int c = 0;
	if (k <= 2)//这一步骤是让n<2时输出正确的值
		return k;
	while (k > 2)
	{
		c = a + b;
		a = b;
		b = c;
		k--;//这一步骤的目的是，让abc这一串“指针”不断向n靠拢，最后求出和储存在c中
		//1 1 2 3 5 8 13.....
		//a b c(step1)
		//  a b c(step2)
		//    a b c(step3)...
	}
	return c;
}
//采用循环处理时，减少了大量重复运算，速度得以大幅度提升。

int main()
{
	int n = 0;
	long long int ret = 0;//给ret足够大的显示空间
	scanf("%d", &n);
	ret = Fib2(n);//写为Fib(n)时调用递归，Fib2(n)时调用循环。
	printf("n的斐波那契数列和为：%lld\n", ret);
	
	return 0;
}
//通过这一例子，可以总结出一个结论，递归容易出现栈溢出，且不适合多次调用自身进行运算的场合。
//相比于循环，递归更加精简，且循环次数少时代码更少更简单。要结合不同情况采用不同方法。
